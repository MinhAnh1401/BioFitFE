package com.example.biofit.view_model

import android.content.Context
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.example.biofit.data.model.dto.MealType
import com.example.biofit.data.model.dto.NotificationDTO
import java.time.LocalDateTime
import java.time.LocalTime

class NotificationWorker(
    context: Context,
    params: WorkerParameters
) : CoroutineWorker(context, params) {

    override suspend fun doWork(): Result {
        // Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i v√† t·∫°o th√¥ng b√°o n·∫øu c·∫ßn
        val currentTime = LocalTime.now()
        val currentHour = currentTime.hour

        val viewModel = NotificationViewModel("testUserId") // Replace with actual userId
        viewModel.loadNotifications()
        return Result.success()

        // Ki·ªÉm tra c√°c khung gi·ªù b·ªØa ƒÉn
        when {
            // B·ªØa s√°ng (7h)
            currentHour == 7 -> {
                createSystemNotification(
                    "ƒê√£ ƒë·∫øn gi·ªù ƒÉn s√°ng r·ªìi! üç≥",
                    "Ch√†o bu·ªïi s√°ng! H√£y n·∫°p nƒÉng l∆∞·ª£ng cho ng√†y m·ªõi nh√©!",
                    MealType.BREAKFAST
                )
            }
            // B·ªØa tr∆∞a (12h)
            currentHour == 12 -> {
                createSystemNotification(
                    "ƒê√£ ƒë·∫øn gi·ªù ƒÉn tr∆∞a r·ªìi! üç≤",
                    "H√£y ngh·ªâ ng∆°i v√† th∆∞·ªüng th·ª©c b·ªØa tr∆∞a dinh d∆∞·ª°ng n√†o!",
                    MealType.LUNCH
                )
            }
            // B·ªØa t·ªëi (18h30)
            currentHour == 18 && currentTime.minute >= 30 -> {
                createSystemNotification(
                    "ƒê√£ ƒë·∫øn gi·ªù ƒÉn t·ªëi r·ªìi! üçó",
                    "H√£y th∆∞·ªüng th·ª©c b·ªØa t·ªëi ngon mi·ªáng v√† b·ªï d∆∞·ª°ng nh√©!",
                    MealType.DINNER
                )
            }
            // Gi·ªù ƒÉn nh·∫π bu·ªïi s√°ng (10h)
            currentHour == 10 -> {
                createSystemNotification(
                    "Gi·ªù ƒÉn nh·∫π bu·ªïi s√°ng üçé",
                    "M·ªôt ch√∫t hoa qu·∫£ ho·∫∑c h·∫°t s·∫Ω gi√∫p b·∫°n duy tr√¨ nƒÉng l∆∞·ª£ng ƒë·∫øn b·ªØa tr∆∞a!",
                    MealType.SNACK
                )
            }
            // Gi·ªù ƒÉn nh·∫π bu·ªïi chi·ªÅu (15h)
            currentHour == 15 -> {
                createSystemNotification(
                    "Gi·ªù ƒÉn nh·∫π bu·ªïi chi·ªÅu ü•ú",
                    "H√£y n·∫°p ch√∫t nƒÉng l∆∞·ª£ng ƒë·ªÉ ho√†n th√†nh t·ªët c√¥ng vi·ªác cu·ªëi ng√†y!",
                    MealType.SNACK
                )
            }
            // Gi·ªù ƒëi ng·ªß (21h30)
            currentHour == 22 -> {
                createSystemNotification(
                    "ƒê√£ ƒë·∫øn gi·ªù ƒëi ng·ªß r·ªìi! üò¥",
                    "H√£y c√≥ m·ªôt gi·∫•c ng·ªß ngon ƒë·ªÉ n·∫°p ƒë·∫ßy nƒÉng l∆∞·ª£ng cho ng√†y mai nh√©!",
                    MealType.SNACK
                )
            }
        }

        return Result.success()
    }

    private fun createSystemNotification(title: String, message: String, mealType: MealType) {

        // L∆∞u notification v√†o database
        val notification = NotificationDTO(
            id = 0,
            title = title,
            message = message,
            mealType = mealType,
            scheduledTime = LocalDateTime.now().toString(),
            isRead = false,
            createdAt = LocalDateTime.now().toString(),
            isReminderSent = false
        )

        // L∆∞u notification (s·∫Ω c·∫ßn injection ho·∫∑c singleton ƒë·ªÉ truy c·∫≠p repository)
        saveNotificationToDatabase(notification)
    }

    private fun saveNotificationToDatabase(notification: NotificationDTO) {
        // Code l∆∞u notification v√†o database
    }
}